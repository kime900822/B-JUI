<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
	"http://struts.apache.org/dtds/struts-2.5.dtd">

<!-- START SNIPPET: xworkSample -->
<struts>

	<!-- 配置web默认编码集 -->
	<constant name="struts.custom.i18n.resources" value="UTF-8" />
	<!-- 默认请求后缀是action，配置之后请求后缀可以是action/do -->
	<constant name="struts.action.extension" value="action,do" />
	<!-- 设置浏览器是否缓存静态内容，默认值true。我们开发阶段建议关闭， 防止修改后测试不到 -->
	<constant name="struts.server.static.browserCache" value="false" />
	<!-- 当struts配置文件修改后，系统是否重新加载该文件。默认为false。开发阶段建议为true， -->
	<constant name="struts.configuratio.xml.reload" value="true" />
	<!-- 开发模式下，这样可以打印出更加详细的错误i -->
	<constant name="struts.devMode" value="true" />
	<!-- 开启动态方法调用 -->
	<constant name="struts.enable.DynamicMethodInvocation" value="true"></constant>
	<!-- 默认视觉主题 这个配置之后label什么都不会显示-->
	<!-- <constant name="struts.ui.theme" value="simple" /> -->
	<constant name="struts.objectFactory" value="org.apache.struts2.spring.StrutsSpringObjectFactory" />
	<!-- 设置上传文件的临时文件夹,默认使用javax.servlet.context.tempdir -->
    <constant name="struts.multipart.saveDir " value="/upload" />
	
	
	
	<package name="Struts 2" extends="struts-default,json-default">
		

		
		<!-- 拦截器 -->
	    <interceptors>  
			<interceptor name="loginInterceptor"  
				class="com.kime.intercept.LoginInterceptor">  
			</interceptor>  
			<!-- 拦截器栈 -->  
			<interceptor-stack name="mystack">  
				<interceptor-ref name="loginInterceptor"></interceptor-ref>
				<interceptor-ref name="defaultStack"></interceptor-ref>  
			</interceptor-stack>  
		</interceptors>  
		
		<!-- 默认烂拦截器 -->
		<default-interceptor-ref name="mystack"></default-interceptor-ref>
	
		<!--global-results放的位置顺序不对会报错， 全局变量error -->  
		<global-results>  
			<!-- LoginInterceptor中的Action.LOGIN对应找到name -->  
			<result name="login" type="redirect">/UI/login.jsp</result>         
		</global-results>
		
		
				
		<action name="login" method="Login" class="UserAction">
			<result name="success" type="redirect">/UI/index.jsp</result>
			<result name="error" type="redirect">/UI/login.jsp</result>
			<interceptor-ref name="defaultStack"></interceptor-ref>		
		</action>
		<action name="logout" method="Logout" class="UserAction">
			<result name="success" type="redirect">/UI/login.jsp</result>
			<interceptor-ref name="defaultStack"></interceptor-ref>	
		</action>

		<action name="register" method="Register" class="UserAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>
		<action name="change" method="Change" class="UserAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>	
		</action>
		<action name="getAllMenu" method="getAllMenu" class="MenuAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>
		<action name="editMenu" method="editMenu" class="MenuAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>
		<action name="deleteMenu" method="deleteMenu" class="MenuAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>
		<action name="getChildMenu" method="getChildMenu" class="MenuAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>
		<action name="getFatherMenu" method="getFatherMenu" class="MenuAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>
		
		<action name="getUser" method="GetUser" class="UserAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>
		
		<action name="modUser" method="ModUser" class="UserAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>
		
		<action name="deleteUser" method="DeleteUser" class="UserAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>	
		<action name="exportUserExcel" method="ExportUserExcel" class="UserAction">
           <result type="stream">
                <param name="contentType">application/vnd.ms-excel</param>
                <param name="inputName">reslutJson</param>            
                <param name="contentDisposition">attachment;filename=${fileName}</param>
                <param name="bufferSize">1024</param>
            </result>
		</action>
		
		
		<action name="importUser" method="ImportUser" class="UserAction">
           <!-- 配置fileUpload的拦截器 -->
<!--            <interceptor-ref name="fileUpload"> -->
           <!-- 文件过滤 -->
           <!-- <param name="allowedTypes">image/bmp,image/png,image/gif,image/jpeg</param> -->
           <!-- 允许后缀名为png,bmp,jpg,doc,xls的文件上传 -->     
			<!-- <param name="allowedExtensions">  
   				 xlsx,xls  
			</param> 		
           配置允许上传的文件大小
           <param name="maximumSize">4000000</param>
           </interceptor-ref>
           <interceptor-ref name="defaultStack"></interceptor-ref>  -->
           <result type="stream">
                <param name="inputName">reslutJson</param>               
            </result>
		</action>
		
		<action name="getRole" method="GetRole" class="RoleAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>	
		
		<action name="deleteRole" method="DeleteRole" class="RoleAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>	
		
		<action name="modeRole" method="ModeRole" class="RoleAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>	
			
		
		<action name="getAllRole" method="GetAllRole" class="RoleAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>
		
		<action name="getAllRole_User" method="GetAllRole_User" class="RoleAction">
			<result type="stream">
				<param name="inputName">reslutJson</param>
			</result>
		</action>
	</package>
</struts>

<!-- END SNIPPET: xworkSample -->

